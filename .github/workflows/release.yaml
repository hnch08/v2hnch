# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go - Build with Wails

on:
  push:
    tags:
      - "v*.*.*" # 触发条件：当推送的 tag 以 'v' 开头，后面跟着三个数字（例如 v1.0.0）

jobs:
  build:
    runs-on: ${{ matrix.os }} # 使用矩阵来指定运行的环境
    strategy:
      matrix:
        include:
          # Linux AMD64
          - os: ubuntu-latest
            os_type: linux
            arch: amd64
            build_command: "wails build"
            package_command: "nfpm pkg --packager deb --target ./dist -f ./nfpm_amd64.yaml"
            artifact_name: "app-linux-amd64"

          # Linux ARM64 (使用自托管 runner 或跨平台编译)
          - os: ubuntu-latest
            os_type: linux
            arch: arm64
            build_command: "CGO_ENABLED=1 GOOS=linux GOARCH=arm64 wails build"
            package_command: "nfpm pkg --packager deb --target ./dist -f ./nfpm_arm64.yaml"
            artifact_name: "app-linux-arm64"

          # Windows AMD64
          - os: windows-latest
            os_type: windows
            arch: amd64
            build_command: "wails build --nsis"
            artifact_name: "app-windows-amd64-setup.exe"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21" # 建议使用更新的 Go 版本

      - name: Set Tag as Environment Variable
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        shell: bash

      # --- Install Dependencies for Linux ---
      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Setting up environment for Linux..."
          sudo apt-get update && sudo apt-get install -y ca-certificates build-essential pkg-config libgtk-3-dev libwebkit2gtk-4.0-dev
          sudo update-ca-certificates
          go install github.com/wailsapp/wails/v2/cmd/wails@latest
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt update
          sudo apt install nfpm
        shell: bash

      # --- Install ARM64 cross-compilation tools (Linux ARM64 only) ---
      - name: Install ARM64 Cross Compilation Tools
        if: runner.os == 'Linux' && matrix.arch == 'arm64'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
        shell: bash

      # --- Install Dependencies for Windows ---
      - name: Install Dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Setting up environment for Windows..."
          go install github.com/wailsapp/wails/v2/cmd/wails@latest
        shell: pwsh

      # --- Create Output Directory ---
      - name: Create dist directory
        run: |
          mkdir -p ./dist
        shell: bash

      # --- Build Step ---
      - name: Build ${{ matrix.os }} (${{ matrix.arch }})
        run: |
          echo "Building for ${{ matrix.os }} (${{ matrix.arch }}) with version: ${{ env.VERSION }}"
          ${{ matrix.build_command }}
        shell: bash

      # --- NFPM Package Step (Linux Only) ---
      - name: Package for Linux (${{ matrix.arch }})
        if: matrix.os_type == 'linux' # 仅当 os_type 是 linux 时执行
        run: |
          echo "Packaging for Linux (${{ matrix.arch }}) with version: ${{ env.VERSION }}"
          ${{ matrix.package_command }}
        shell: bash

      # --- Upload Artifacts ---
      - name: Upload Linux AMD64 Artifact
        if: matrix.os_type == 'linux' && matrix.arch == 'amd64'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ./dist/v2hnch_${{ env.VERSION }}_amd64.deb
          if-no-files-found: error

      - name: Upload Linux ARM64 Artifact
        if: matrix.os_type == 'linux' && matrix.arch == 'arm64'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ./dist/v2hnch_${{ env.VERSION }}_arm64.deb
          if-no-files-found: error

      - name: Upload Windows Artifact
        if: matrix.os_type == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ./build/bin/创合AI登录器.exe
          if-no-files-found: error